// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `TransferPrxHelper.java'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Yy.SliceTransferInterface;

public final class TransferPrxHelper extends Ice.ObjectPrxHelperBase implements TransferPrx
{
    public String
    Encrypt(String Text, String sKey)
    {
        return Encrypt(Text, sKey, null, false);
    }

    public String
    Encrypt(String Text, String sKey, java.util.Map<String, String> __ctx)
    {
        return Encrypt(Text, sKey, __ctx, true);
    }

    private String
    Encrypt(String Text, String sKey, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("Encrypt");
                __delBase = __getDelegate(false);
                _TransferDel __del = (_TransferDel)__delBase;
                return __del.Encrypt(Text, sKey, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __Encrypt_name = "Encrypt";

    public Ice.AsyncResult begin_Encrypt(String Text, String sKey)
    {
        return begin_Encrypt(Text, sKey, null, false, null);
    }

    public Ice.AsyncResult begin_Encrypt(String Text, String sKey, java.util.Map<String, String> __ctx)
    {
        return begin_Encrypt(Text, sKey, __ctx, true, null);
    }

    public Ice.AsyncResult begin_Encrypt(String Text, String sKey, Ice.Callback __cb)
    {
        return begin_Encrypt(Text, sKey, null, false, __cb);
    }

    public Ice.AsyncResult begin_Encrypt(String Text, String sKey, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_Encrypt(Text, sKey, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_Encrypt(String Text, String sKey, Callback_Transfer_Encrypt __cb)
    {
        return begin_Encrypt(Text, sKey, null, false, __cb);
    }

    public Ice.AsyncResult begin_Encrypt(String Text, String sKey, java.util.Map<String, String> __ctx, Callback_Transfer_Encrypt __cb)
    {
        return begin_Encrypt(Text, sKey, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_Encrypt(String Text, String sKey, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__Encrypt_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __Encrypt_name, __cb);
        try
        {
            __result.__prepare(__Encrypt_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(Text);
            __os.writeString(sKey);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_Encrypt(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __Encrypt_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        String __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readString();
        __is.endReadEncaps();
        return __ret;
    }

    public static TransferPrx
    checkedCast(Ice.ObjectPrx __obj)
    {
        TransferPrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (TransferPrx)__obj;
            }
            catch(ClassCastException ex)
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    TransferPrxHelper __h = new TransferPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static TransferPrx
    checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        TransferPrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (TransferPrx)__obj;
            }
            catch(ClassCastException ex)
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    TransferPrxHelper __h = new TransferPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static TransferPrx
    checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        TransferPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    TransferPrxHelper __h = new TransferPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static TransferPrx
    checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        TransferPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    TransferPrxHelper __h = new TransferPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static TransferPrx
    uncheckedCast(Ice.ObjectPrx __obj)
    {
        TransferPrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (TransferPrx)__obj;
            }
            catch(ClassCastException ex)
            {
                TransferPrxHelper __h = new TransferPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static TransferPrx
    uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        TransferPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            TransferPrxHelper __h = new TransferPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::Yy::SliceTransferInterface::Transfer"
    };

    public static String
    ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM
    __createDelegateM()
    {
        return new _TransferDelM();
    }

    protected Ice._ObjectDelD
    __createDelegateD()
    {
        return new _TransferDelD();
    }

    public static void
    __write(IceInternal.BasicStream __os, TransferPrx v)
    {
        __os.writeProxy(v);
    }

    public static TransferPrx
    __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            TransferPrxHelper result = new TransferPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }
}
